#!/bin/bash
#################################################################################################
# Source System Code 	: Generic							        #	
# Code Type		: T-BETQ							        #	
# Created By		: IBM AMS(DWH) Team 						        # 	
# Table Used 		: DP_VEDW_BO.LKP_TIME_MON ,					        #
#                       : DP_VEDW_BO.DIM_SUBS_USAGE_REV_HISTORY,				#
#			: DP_VEDW_BO.DIM_SUBSCRIPTION_PROFILE,					#
#			: DP_VEDW_BO.LKP_PINCODE_GROUP_VIEW,					#
#			: DP_VEDW_BO.DIM_SUBS_TARIFF_HISTORY,					#
#			: DP_VEDW_BO.LKP_TARIFF_PLAN_GROUP,					#
#			: DP_VEDW_BO.DIM_SUBS_STATUS_HISTORY,					#
#			: DP_VEDW_BO.DIM_COST_CENTER_HISTORY,					#
#			: DP_VEDW_BO.LKP_CHANNEL_PARTNER_GROUP,					#
#			: DP_VEDW_BO.AREA,							#
#			: SAS_CONTROL_TABLE                                                     #	
# Create Date		: 25-March-2009							        #	
# Modified By		: Preseetha L								#	
# Modify Date		: 2009-07-24  						                #	
# Modify History	: Enterprise description mapped to company name.		        #	
# PURPOSE		: Refresh views for all circles and make entry in sas_control_table     #
#                         1) Refresh view and insert entry into control table                   #
#                         2) Input for the above step gets from circle.lst                      #
#                                                                                               #
#################################################################################################
. /home/tws_user/sas_month_tivoli_profile.sh
cd /data11/FACT_SUBS/OPS_SAS/SAS_Monthly_Agg/SAS_Monthly_Agg-2/arpu

. ${NZ_LIB}/NZ_wrapper.sh

export Error_Code=0

#################################################################################################
###                       Step1: Refresh View for previous month                              ###
#################################################################################################

while read CIRCLE
do

. /data11/FACT_SUBS/OPS_SAS/SAS_Monthly_Agg/SAS_Monthly_Agg-2/00_sas_begin/sas_vars ${CIRCLE}

if [ ${CIRCLE} -ne 10 ]
then

nzsql_wrap <<! >> ./xlogs/arpu_${CIRCLE}_${DATE_MON_ID_1}.log
/******Step 1  DSP + REV *******/
\c ${DBNAME}
CREATE TEMPORARY TABLE DSP_REV AS
(
 SELECT
        DSURH.DATE_MON_ID,
	DSURH.SUBSCRIPTION_ID,
	DSURH.SOURCE_SYSTEM_CODE,
	DSP.SUB_CIRCLE_ID ,
	DSP.DISTRIBUTOR_ID,
	CASE WHEN DSP.PRE_POST_IND=-77 THEN 'OTHERS'
	     WHEN DSP.PRE_POST_IND=0   THEN 'INROAMERS'
	     WHEN DSP.PRE_POST_IND=1   THEN 'PREPAID'
	     WHEN DSP.PRE_POST_IND=2   THEN 'POSTPAID'
	     ELSE NULL 
	END  PRE_POST_IND_DESC,
	DSP.BILL_CYCLE_DESC BILL_CYCLE_DESC,
	DSP.SEGMENT_DESC,
	DSP.SEGMENT_GROUP_DESC  SEGMENT_GROUP_DESC,
	CASE     
		WHEN round(DSP.AON,1) BETWEEN 0     AND 1	THEN '00-01' 
		WHEN round(DSP.AON,1) BETWEEN 1.01  AND 2	THEN '01-02' 
		WHEN round(DSP.AON,1) BETWEEN 2.01  AND 3	THEN '02-03' 
		WHEN round(DSP.AON,1) BETWEEN 3.01  AND 4	THEN '03-04' 
		WHEN round(DSP.AON,1) BETWEEN 4.01  AND 5	THEN '04-05' 
		WHEN round(DSP.AON,1) BETWEEN 5.01  AND 6	THEN '05-06' 
		WHEN round(DSP.AON,1) BETWEEN 6.01  AND 7	THEN '06-07' 
		WHEN round(DSP.AON,1) BETWEEN 7.01  AND 8	THEN '07-08'
		WHEN round(DSP.AON,1) BETWEEN 8.01  AND 9	THEN '08-09'
		WHEN round(DSP.AON,1) BETWEEN 9.01  AND 10	THEN '09-10'
		WHEN round(DSP.AON,1) BETWEEN 10.01 AND 11	THEN '10-11'
		WHEN round(DSP.AON,1) BETWEEN 11.01 AND 12	THEN '11-12'
		WHEN round(DSP.AON,1) BETWEEN 12.01 AND 18	THEN '12-18'
		WHEN round(DSP.AON,1) BETWEEN 18.01 AND 24	THEN '18-24'
		WHEN round(DSP.AON,1) BETWEEN 24.01 AND 30	THEN '24-30'
		WHEN round(DSP.AON,1) BETWEEN 30.01 AND 36	THEN '30-36'
		WHEN round(DSP.AON,1) BETWEEN 36.01 AND 42	THEN '36-42'
		WHEN round(DSP.AON,1) BETWEEN 42.01 AND 48	THEN '42-48'
		WHEN round(DSP.AON,1) BETWEEN 48.01 AND 54	THEN '48-54'
		WHEN round(DSP.AON,1) BETWEEN 54.01 AND 60	THEN '54-60'
		WHEN round(DSP.AON,1) BETWEEN 60.01 AND 66	THEN '60-66'
		WHEN round(DSP.AON,1) BETWEEN 66.01 AND 72	THEN '66-72'
		WHEN round(DSP.AON,1) >  72 THEN '73 and Above'
		ELSE 'Undefined' 
	END AON,
	DSP.CURR_TARIFF_PLAN_SER_CLASS  CURR_TARIFF_PLAN_SER_CLASS,
	DSP.CORP_CODE  ,
	CASE WHEN DSURH.REVENUE_BAND_DESC IS NULL THEN '00000-00000' 
	     ELSE DSURH.REVENUE_BAND_DESC 
	END  ARPU_BUCKET,
	SUBSTR(DSP.BILL_PINCODE,1,6) BILL_PINCODE,                                          
	SUM(DSURH.OUT_REVENUE_BILL_AMT_WO_ROAM) OUTGOING_REVENUE_AMT,
	SUM(DSURH.adjustments) adjustments,
	SUM(DSURH.Total_IUC_Pass_Through) Total_IUC_Pass_Through,
	SUM(DSURH.TOTAL_REVENUE_INCOMING_CDR) TOTAL_REVENUE_INCOMING,
	SUM(DSURH.TOTAL_OUT_USAGE_CDR) ACTUAL_OUTGOING_USAGE,
	SUM(DSURH.ADC) ADC,
	SUM(DSURH.ROAMING_SURCHARGE_AMT)  ROAMING_SURCHARGE_AMT,
	SUM(DSURH.REVENUE_SHARE) REVENUE_SHARE,
	SUM(DSURH.ACCESSFEE_RENTALS) ACCESSFEE_RENTALS ,
	SUM(DSURH.Home_IUC_Pass_Through) Home_IUC_Pass_Through ,
	SUM(DSURH.Roam_IUC_Pass_Through) Roam_IUC_Pass_Through
  FROM
        DP_VEDW_BO..DIM_SUBS_USAGE_REV_HISTORY  DSURH 
  LEFT OUTER JOIN 
		DP_VEDW_BO..DIM_SUBSCRIPTION_PROFILE_MONTHLY  DSP 
  ON	DSP.SUBSCRIPTION_ID    = DSURH.SUBSCRIPTION_ID
  AND	DSP.SOURCE_SYSTEM_CODE = DSURH.SOURCE_SYSTEM_CODE
  AND	DSURH.DATE_MON_ID      = ${DATE_MON_ID_1}

  WHERE DSURH.SOURCE_SYSTEM_CODE = ${CIRCLE}20
  AND	DSP.SOURCE_SYSTEM_CODE   = ${CIRCLE}20
  AND   DSP.ACTIVATION_DATE  <>  '2899-09-09'
  GROUP  BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14
) 
DISTRIBUTE ON  ( SUBSCRIPTION_ID,SOURCE_SYSTEM_CODE) ;

/****** Step 2 TARIFF *******/

CREATE TEMPORARY TABLE TARIFF  AS
(SELECT
SUBSCRIPTION_ID,
CURR_TARIFF_PLAN_ID,
TARIFF_PLAN_NAME,
SOURCE_SYSTEM_CODE
FROM(
  SELECT
		DTH.SUBSCRIPTION_ID,
		DTH.CURR_TARIFF_PLAN_ID ,
		LTPG.TARIFF_PLAN_NAME    TARIFF_PLAN_NAME,
		DTH.SOURCE_SYSTEM_CODE /* 1020 ONLY */,
		RANK () OVER ( PARTITION BY subscription_id ORDER BY TARIFF_END_DATE_TM DESC)  QUALIFY

FROM    DP_VEDW_BO..DIM_SUBS_TARIFF_HISTORY  DTH 
LEFT OUTER JOIN 
        DP_VEDW_BO..LKP_TARIFF_PLAN_GROUP   LTPG 
ON	LTPG.TARIFF_PLAN_ID=DTH.CURR_TARIFF_PLAN_ID 
AND	LTPG.CIRCLE_CD = DTH.CIRCLE_CD
WHERE	DTH.SOURCE_SYSTEM_CODE = ${CIRCLE}20
AND	CAST( DTH.TARIFF_EFF_DATE_TM AS DATE ) <= '${MON_END_DT}'
AND	CAST( DTH.TARIFF_END_DATE_TM AS DATE ) >= '${MON_END_DT}'
)SUB WHERE QUALIFY=1
) 
DISTRIBUTE ON  ( SUBSCRIPTION_ID,SOURCE_SYSTEM_CODE) ;

/****** Step 3 SUBS STATUS *******/

CREATE TEMPORARY TABLE SUBS_STATUS AS
(
 SELECT
	  DSSH.SUBSCRIPTION_ID,
	  DSSH.SOURCE_SYSTEM_CODE,
	  DSSH.CURR_STATUS_DESC ,
	  DSSH.STATUS_EFF_DATE,
	  DSSH.STATUS_END_DATE
 FROM
       DP_VEDW_BO..DIM_SUBS_STATUS_HISTORY  DSSH 
 WHERE DSSH.SOURCE_SYSTEM_CODE = ${CIRCLE}20
 AND   DSSH.STATUS_EFF_DATE          <=  '${MON_END_DT}' 
 AND   DSSH.STATUS_END_DATE          >   '${MON_END_DT}' 
 ) 
DISTRIBUTE ON  ( SUBSCRIPTION_ID,SOURCE_SYSTEM_CODE) ;

/****** Step 4 COST CENTER *******/

CREATE TEMPORARY TABLE COST_CENTER AS
(
  SELECT
	   CCH.SUBSCRIPTION_ID ,
	   CCH.SOURCE_SYSTEM_CODE,
	   CCH.COST_CENTER_DESC

  FROM  
        DP_VEDW_BO..DIM_COST_CENTER_HISTORY  CCH 
  WHERE CCH.SOURCE_SYSTEM_CODE = ${CIRCLE}20
  AND   CCH.COST_CENTER_EFF_DT <= '${MON_END_DT}'
  AND   CCH.COST_CENTER_END_DT  > '${MON_END_DT}'
 ) 

DISTRIBUTE ON  ( SUBSCRIPTION_ID,SOURCE_SYSTEM_CODE) ;

/****** Step 5  DSP + REV + COST CENTER *******/

CREATE TEMPORARY TABLE DSP_REV_CC AS
(
 SELECT 
                           
		 DSP_REV.SUBSCRIPTION_ID               
		,DSP_REV.SOURCE_SYSTEM_CODE    
		,DSP_REV.SUB_CIRCLE_ID 
		,DSP_REV.DATE_MON_ID
		,DSP_REV.DISTRIBUTOR_ID                
		,DSP_REV.PRE_POST_IND_DESC             
		,DSP_REV.BILL_CYCLE_DESC   
		,DSP_REV.SEGMENT_DESC
		,DSP_REV.SEGMENT_GROUP_DESC            
		,DSP_REV.AON  
		,COST_CENTER.COST_CENTER_DESC              
		,DSP_REV.CURR_TARIFF_PLAN_SER_CLASS    
		,DSP_REV.CORP_CODE                     
		,DSP_REV.ARPU_BUCKET   
		,DSP_REV.BILL_PINCODE
		,SUM( DSP_REV.OUTGOING_REVENUE_AMT ) OUTGOING_REVENUE_AMT         
		,SUM( DSP_REV.adjustments ) adjustments         
		,SUM( DSP_REV.Total_IUC_Pass_Through ) Total_IUC_Pass_Through              
		,SUM( DSP_REV.TOTAL_REVENUE_INCOMING ) TOTAL_REVENUE_INCOMING      
		,SUM( DSP_REV.ACTUAL_OUTGOING_USAGE ) ACTUAL_OUTGOING_USAGE       
		,SUM( DSP_REV.ADC ) ADC                         
		,SUM( DSP_REV.ROAMING_SURCHARGE_AMT ) ROAMING_SURCHARGE_AMT         
		,SUM( DSP_REV.REVENUE_SHARE ) REVENUE_SHARE                
		,SUM( DSP_REV.ACCESSFEE_RENTALS ) ACCESSFEE_RENTALS     
		,SUM( DSP_REV.Home_IUC_Pass_Through ) Home_IUC_Pass_Through              
		,SUM( DSP_REV.Roam_IUC_Pass_Through ) Roam_IUC_Pass_Through                    
  FROM 
		DSP_REV   
  LEFT OUTER JOIN 
                COST_CENTER
      
  ON     COST_CENTER.SUBSCRIPTION_ID     = DSP_REV.SUBSCRIPTION_ID    
  AND    COST_CENTER.SOURCE_SYSTEM_CODE  = DSP_REV.SOURCE_SYSTEM_CODE
  GROUP  BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
 ) 
DISTRIBUTE ON  ( SUBSCRIPTION_ID,SOURCE_SYSTEM_CODE ) ;

DROP TABLE DSP_REV;
DROP TABLE COST_CENTER ;

/****** Step 6 DSP + REV + COST CENTER + TARIFF *******/

CREATE TEMPORARY TABLE DSP_REV_CC_TARIFF 
AS
  (
   SELECT 
		 DSP_REV_CC.SUBSCRIPTION_ID               
		,DSP_REV_CC.SOURCE_SYSTEM_CODE               
		,DSP_REV_CC.SUB_CIRCLE_ID                 
		,DSP_REV_CC.DATE_MON_ID                   
		,DSP_REV_CC.DISTRIBUTOR_ID                
		,DSP_REV_CC.PRE_POST_IND_DESC             
		,DSP_REV_CC.BILL_CYCLE_DESC
		,DSP_REV_CC.SEGMENT_DESC
		,DSP_REV_CC.SEGMENT_GROUP_DESC            
		,DSP_REV_CC.AON                           
		,DSP_REV_CC.COST_CENTER_DESC              
		,DSP_REV_CC.CURR_TARIFF_PLAN_SER_CLASS  
		,TARIFF.TARIFF_PLAN_NAME 
		,DSP_REV_CC.CORP_CODE                     
		,DSP_REV_CC.ARPU_BUCKET  
		,DSP_REV_CC.BILL_PINCODE
		,SUM( DSP_REV_CC.OUTGOING_REVENUE_AMT ) OUTGOING_REVENUE_AMT         
		,SUM( DSP_REV_CC.adjustments ) adjustments         
		,SUM( DSP_REV_CC.Total_IUC_Pass_Through ) Total_IUC_Pass_Through       
		,SUM( DSP_REV_CC.TOTAL_REVENUE_INCOMING  ) TOTAL_REVENUE_INCOMING      
		,SUM( DSP_REV_CC.ACTUAL_OUTGOING_USAGE  ) ACTUAL_OUTGOING_USAGE       
		,SUM( DSP_REV_CC.ADC  ) ADC                         
		,SUM( DSP_REV_CC.ROAMING_SURCHARGE_AMT ) ROAMING_SURCHARGE_AMT         
		,SUM( DSP_REV_CC.REVENUE_SHARE ) REVENUE_SHARE                
		,SUM( DSP_REV_CC.ACCESSFEE_RENTALS ) ACCESSFEE_RENTALS              
        ,SUM( DSP_REV_CC.Home_IUC_Pass_Through ) Home_IUC_Pass_Through              
		,SUM( DSP_REV_CC.Roam_IUC_Pass_Through ) Roam_IUC_Pass_Through                      

   FROM 
		DSP_REV_CC
   LEFT OUTER JOIN 
         TARIFF 
   ON   TARIFF.SUBSCRIPTION_ID     = DSP_REV_CC.SUBSCRIPTION_ID    
   AND  TARIFF.SOURCE_SYSTEM_CODE  = DSP_REV_CC.SOURCE_SYSTEM_CODE
   GROUP  BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16							    
  ) 
DISTRIBUTE ON  ( SUBSCRIPTION_ID,SOURCE_SYSTEM_CODE );

DROP TABLE DSP_REV_CC ;
DROP TABLE TARIFF ;

/****** Step 7 DSP + REV + COST CENTER + TARIFF + STATUS *******/

CREATE TEMPORARY TABLE DSP_REV_CC_TARIFF_STATUS 
AS
(
 SELECT
 		  DSP_REV_CC_TARIFF.SOURCE_SYSTEM_CODE     
		, DSP_REV_CC_TARIFF.SUB_CIRCLE_ID CIRCLE_CODE
		, DSP_REV_CC_TARIFF.PRE_POST_IND_DESC                
		, DSP_REV_CC_TARIFF.BILL_CYCLE_DESC
		, DSP_REV_CC_TARIFF.SEGMENT_DESC
		, DSP_REV_CC_TARIFF.SEGMENT_GROUP_DESC
		, DSP_REV_CC_TARIFF.AON MON_AON_BUCKET
		, DSP_REV_CC_TARIFF.TARIFF_PLAN_NAME
		, CASE 
			WHEN lower(TRIM(SUBS_STATUS.CURR_STATUS_DESC)) = 'a' THEN 'Active'
			WHEN lower(TRIM(SUBS_STATUS.CURR_STATUS_DESC)) = 'd' THEN 'Disconnect'
			WHEN lower(TRIM(SUBS_STATUS.CURR_STATUS_DESC)) = 's' THEN 'Suspension'
			ELSE TRIM(SUBS_STATUS.CURR_STATUS_DESC)
		  END CURR_STATUS_DESC
		, DSP_REV_CC_TARIFF.ARPU_BUCKET
		, DSP_REV_CC_TARIFF.CURR_TARIFF_PLAN_SER_CLASS
		, DSP_REV_CC_TARIFF.COST_CENTER_DESC
		, DSP_REV_CC_TARIFF.CORP_CODE
		, DSP_REV_CC_TARIFF.BILL_PINCODE
		, DSP_REV_CC_TARIFF.DISTRIBUTOR_ID
		, COUNT( DISTINCT DSP_REV_CC_TARIFF.SUBSCRIPTION_ID )   TOTAL_SUBS_CNT
		, SUM( DSP_REV_CC_TARIFF.OUTGOING_REVENUE_AMT ) OUTGOING_REVENUE_AMT         
		, SUM( DSP_REV_CC_TARIFF.adjustments ) adjustments         
		, SUM( DSP_REV_CC_TARIFF.Total_IUC_Pass_Through ) Total_IUC_Pass_Through  
		, SUM( DSP_REV_CC_TARIFF.TOTAL_REVENUE_INCOMING  ) TOTAL_REVENUE_INCOMING  
		, COUNT( DISTINCT
				(CASE WHEN lower(TRIM(SUBS_STATUS.CURR_STATUS_DESC)) ='s'
					   AND EXTRACT( MONTH FROM SUBS_STATUS.STATUS_EFF_DATE ) = EXTRACT( MONTH FROM (ADD_MONTHS(CURRENT_DATE,-1)) ) 
					   AND EXTRACT( YEAR FROM SUBS_STATUS.STATUS_EFF_DATE )  = EXTRACT( YEAR FROM (ADD_MONTHS(CURRENT_DATE,-1)) ) 
				      THEN DSP_REV_CC_TARIFF.SUBSCRIPTION_ID 
				END)
		        ) SUSPENSION_CNT
		, COUNT( DISTINCT
		        ( CASE WHEN (lower(TRIM(SUBS_STATUS.CURR_STATUS_DESC)) = 'd' OR lower(trim(SUBS_STATUS.CURR_STATUS_DESC)) ='disconnect') 
			             AND EXTRACT( MONTH FROM SUBS_STATUS.STATUS_EFF_DATE ) = EXTRACT( MONTH FROM (ADD_MONTHS(CURRENT_DATE,-1)) )
		                     AND EXTRACT( YEAR FROM SUBS_STATUS.STATUS_EFF_DATE )  = EXTRACT( YEAR FROM (ADD_MONTHS(CURRENT_DATE,-1)) ) 
		               THEN DSP_REV_CC_TARIFF.SUBSCRIPTION_ID 
			  END
			)
		       ) DISCONNECTED_CNT
		, COUNT( DISTINCT
		         ( CASE WHEN lower(TRIM(SUBS_STATUS.CURR_STATUS_DESC)) ='grace' 
				     AND EXTRACT ( MONTH FROM SUBS_STATUS.STATUS_EFF_DATE ) = EXTRACT( MONTH FROM (ADD_MONTHS(CURRENT_DATE,-1)) ) 
				     AND EXTRACT ( YEAR FROM  SUBS_STATUS.STATUS_EFF_DATE )    = EXTRACT( YEAR FROM (ADD_MONTHS(CURRENT_DATE,-1)) ) 
				THEN DSP_REV_CC_TARIFF.SUBSCRIPTION_ID 
			   END
			 )
		       ) GRACE_CNT
		, SUM( DSP_REV_CC_TARIFF.ACTUAL_OUTGOING_USAGE  ) ACTUAL_OUTGOING_USAGE       
		, SUM( DSP_REV_CC_TARIFF.ADC  ) ADC                         
		, SUM( DSP_REV_CC_TARIFF.ROAMING_SURCHARGE_AMT ) ROAMING_SURCHARGE_AMT         
		, SUM( DSP_REV_CC_TARIFF.REVENUE_SHARE ) REVENUE_SHARE                
		, SUM( DSP_REV_CC_TARIFF.ACCESSFEE_RENTALS ) ACCESSFEE_RENTALS 
		, SUM( DSP_REV_CC_TARIFF.Home_IUC_Pass_Through ) Home_IUC_Pass_Through              
		, SUM( DSP_REV_CC_TARIFF.Roam_IUC_Pass_Through ) Roam_IUC_Pass_Through   
   FROM 
          	 DSP_REV_CC_TARIFF
LEFT OUTER JOIN 
		 SUBS_STATUS

ON    DSP_REV_CC_TARIFF.SUBSCRIPTION_ID    =  SUBS_STATUS.SUBSCRIPTION_ID
AND   DSP_REV_CC_TARIFF.SOURCE_SYSTEM_CODE =  SUBS_STATUS.SOURCE_SYSTEM_CODE
  GROUP  BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
) 
DISTRIBUTE ON (DISTRIBUTOR_ID,SOURCE_SYSTEM_CODE) ;

/********** FINAL INSERT *********/

DELETE FROM ${DBNAME}..SAS_ARPU_SGMNT_MONTHLY
WHERE CIRCLE_CODE= ${CIRCLE}
AND YEAR_ID = ${YEAR_ID}
AND upper(MON_FULL_NAME) = '${MON_FULL_NAME}';

INSERT INTO ${DBNAME}..SAS_ARPU_SGMNT_MONTHLY

 SELECT
	CAST('${YEAR_ID}'  AS INTEGER)  YEAR_ID
      , CAST('${MON_FULL_NAME}' AS VARCHAR(15)) MON_FULL_NAME
      , DSP_REV_CC_TARIFF_STATUS.CIRCLE_CODE   
      , DSP_REV_CC_TARIFF_STATUS.PRE_POST_IND_DESC
      , CORP.AREA_DESC  COMPANY_NAME 
      , DSP_REV_CC_TARIFF_STATUS.BILL_CYCLE_DESC 
      , DSP_REV_CC_TARIFF_STATUS.SEGMENT_DESC 
      , DSP_REV_CC_TARIFF_STATUS.SEGMENT_GROUP_DESC            
      , DSP_REV_CC_TARIFF_STATUS.MON_AON_BUCKET
      , DSP_REV_CC_TARIFF_STATUS.TARIFF_PLAN_NAME
      , DSP_REV_CC_TARIFF_STATUS.CURR_STATUS_DESC
      , DSP_REV_CC_TARIFF_STATUS.ARPU_BUCKET   
      , DSP_REV_CC_TARIFF_STATUS.CURR_TARIFF_PLAN_SER_CLASS    
      , DSP_REV_CC_TARIFF_STATUS.COST_CENTER_DESC
      , UPPER(TRIM(LCPG.zones)) ZONE_AGNT 
      , UPPER(TRIM(LPGV.zones)) ZONE_PIN 
      , SUM (DSP_REV_CC_TARIFF_STATUS.TOTAL_SUBS_CNT) TOTAL_SUBS_CNT
      , SUM (DSP_REV_CC_TARIFF_STATUS.SUSPENSION_CNT) SUSPENSION_CNT
      , SUM (DSP_REV_CC_TARIFF_STATUS.DISCONNECTED_CNT) DISCONNECTED_CNT
      , SUM (DSP_REV_CC_TARIFF_STATUS.GRACE_CNT) GRACE_CNT
      , SUM (DSP_REV_CC_TARIFF_STATUS.OUTGOING_REVENUE_AMT) OUTGOING_REVENUE_AMT
      , SUM (DSP_REV_CC_TARIFF_STATUS.adjustments)  adjustments
      , SUM (DSP_REV_CC_TARIFF_STATUS.Total_IUC_Pass_Through) Total_IUC_Pass_Through
      , SUM (DSP_REV_CC_TARIFF_STATUS.TOTAL_REVENUE_INCOMING) TOTAL_REVENUE_INCOMING
      , SUM (DSP_REV_CC_TARIFF_STATUS.ACTUAL_OUTGOING_USAGE) ACTUAL_OUTGOING_USAGE
      , SUM (DSP_REV_CC_TARIFF_STATUS.ADC) ADC
      , SUM (DSP_REV_CC_TARIFF_STATUS.ROAMING_SURCHARGE_AMT) ROAMING_SURCHARGE_AMT
      , SUM (DSP_REV_CC_TARIFF_STATUS.REVENUE_SHARE ) REVENUE_SHARE
      , SUM (DSP_REV_CC_TARIFF_STATUS.ACCESSFEE_RENTALS) ACCESSFEE_RENTALS
      , SUM (DSP_REV_CC_TARIFF_STATUS.Home_IUC_Pass_Through) Home_IUC_Pass_Through
      , SUM (DSP_REV_CC_TARIFF_STATUS.Roam_IUC_Pass_Through) Roam_IUC_Pass_Through
FROM 
      DSP_REV_CC_TARIFF_STATUS
LEFT OUTER JOIN 
      (
         SELECT 
                AREA_ID
	      , AREA_DESC
	      , SOURCE_SYSTEM_CODE
         FROM 
               DP_VEDW_BO..AREA
	 WHERE SOURCE_SYSTEM_CODE = ${CIRCLE}20
      )  CORP 
   ON    CAST(CORP.AREA_ID AS VARCHAR(50)) = DSP_REV_CC_TARIFF_STATUS.CORP_CODE                             	                    
 AND     CORP.SOURCE_SYSTEM_CODE = DSP_REV_CC_TARIFF_STATUS.SOURCE_SYSTEM_CODE

LEFT OUTER JOIN 
      (
	SELECT * 
	FROM 
	       DP_VEDW_BO..LKP_PINCODE_GROUP_VIEW   
	WHERE  CIRCLE_CD = ${CIRCLE}
      ) LPGV
		 
   ON    LPGV.pincode = TRIM(DSP_REV_CC_TARIFF_STATUS.BILL_PINCODE)
   AND   LPGV.CIRCLE_CD = DSP_REV_CC_TARIFF_STATUS.CIRCLE_CODE 

LEFT OUTER JOIN 
      (
	SELECT * 
	FROM   DP_VEDW_BO..LKP_CHANNEL_PARTNER_GROUP  
	WHERE  SOURCE_SYSTEM_CODE = ${CIRCLE}20
      ) LCPG 

   ON    TRIM(LCPG.CHANNEL_NAME) = TRIM (DSP_REV_CC_TARIFF_STATUS.DISTRIBUTOR_ID) 
   AND   LCPG.SOURCE_SYSTEM_CODE = DSP_REV_CC_TARIFF_STATUS.SOURCE_SYSTEM_CODE

  GROUP  BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
;
!
if [ ${NZ_RETCODE} -ne 0 ]
then
      exit 1
fi

nzsql_wrap <<! >> ./xlogs/arpu_${CIRCLE}_${DATE_MON_ID_1}.log
\c ${DBVNAME}
/*###############################################################################################
###                                        
Step2: Refreshing view                             ###
###############################################################################################*/

CREATE OR REPLACE VIEW ${DBVNAME}..SAS_ARPU_M_${CIRCLE}
AS

SELECT * FROM ${DBNAME}..SAS_ARPU_SGMNT_MONTHLY 
WHERE CIRCLE_CODE= ${CIRCLE};
!

if [ ${NZ_RETCODE} -ne 0 ]
then
      exit 1
fi

nzsql_wrap <<! >> ./xlogs/arpu_${CIRCLE}_${DATE_MON_ID_1}.log
\c ${DBNAME}
/*###############################################################################################
###  step2: 
INSERT a row in SAS load control table with previous date_mon_id            ##        
#################################################################################################*/

INSERT INTO ${DBNAME}..SAS_CONTROL_TABLE
SELECT
NEXT VALUE FOR ${DBNAME}..SEQ_SAS_CONTROL_TABLE AS NEW_JOB_ID
,'ARPU'
,'M'
,'SAS_ARPU_M_${CIRCLE}'
,NULL
,${CIRCLE}
,CURRENT_TIMESTAMP
,CURRENT_TIMESTAMP
,NULL
,2
,100
,NULL
,NULL
,NULL
,'D'
;
!
if [ ${NZ_RETCODE} -ne 0 ]
then
      exit 1
fi
else

nzsql_wrap <<! >> ./xlogs/arpu_${CIRCLE}_${DATE_MON_ID_1}.log

\c ${DBNAME}
DELETE FROM ${DBNAME}..ARPU_SGMNT_MUMBAI
WHERE CIRCLE_CODE= ${CIRCLE}
AND YEAR_ID = ${YEAR_ID}
AND upper(MON_FULL_NAME) = '${MON_FULL_NAME}';
!

nzsql_wrap <<! >> ./xlogs/arpu_${CIRCLE}_${DATE_MON_ID_1}.log

\c ${DBNAME}
INSERT INTO  ${DBNAME}..ARPU_SGMNT_MUMBAI

SELECT
CAST('${YEAR_ID}'  AS INTEGER)  YEAR_ID,
CAST('${MON_FULL_NAME}' AS VARCHAR(15)) MON_FULL_NAME,
CAST(${CIRCLE}  AS SMALLINT) CIRCLE_CODE,
CAST(CASE WHEN DSP.PRE_POST_IND=-77 THEN 'OTHERS'
  WHEN DSP.PRE_POST_IND=0  THEN 'INROAMERS'
  WHEN DSP.PRE_POST_IND=1  THEN 'PREPAID'
  WHEN DSP.PRE_POST_IND=2 THEN 'POSTPAID'
  ELSE NULL END AS VARCHAR(9)) PRE_POST_IND_DESC,
CAST(CORP.AREA_DESC  AS VARCHAR(100)) COMPANY_NAME,
CAST(DSP.BILL_CYCLE_DESC  AS VARCHAR(100))  BILL_CYCLE_DESC,
CAST(DSP.SEGMENT_DESC   AS  VARCHAR(100))  SEGMENT_DESC,
CAST(DSP.SEGMENT_GROUP_DESC   AS  VARCHAR(100))  SEGMENT_GROUP_DESC,
CAST(CASE    
    WHEN round(DSP.AON,1) BETWEEN 0 AND 1 THEN '00-01' 
	WHEN round(DSP.AON,1) BETWEEN 1.01 AND 2 THEN '01-02' 
	WHEN round(DSP.AON,1) BETWEEN 2.01 AND 3 THEN '02-03' 
	WHEN round(DSP.AON,1) BETWEEN 3.01 AND 4 THEN '03-04' 
	WHEN round(DSP.AON,1) BETWEEN 4.01 AND 5 THEN '04-05' 
	WHEN round(DSP.AON,1) BETWEEN 5.01 AND 6 THEN '05-06' 
	WHEN round(DSP.AON,1) BETWEEN 6.01 AND 7 THEN '06-07' 
	WHEN round(DSP.AON,1) BETWEEN 7.01 AND 8  THEN '07-08'
	WHEN round(DSP.AON,1) BETWEEN 8.01 AND 9  THEN '08-09'
	WHEN round(DSP.AON,1) BETWEEN 9.01 AND 10  THEN '09-10'
	WHEN round(DSP.AON,1) BETWEEN 10.01 AND 11  THEN '10-11'
	WHEN round(DSP.AON,1) BETWEEN 11.01 AND 12  THEN '11-12'
	WHEN round(DSP.AON,1) BETWEEN 12.01 AND 18 THEN '12-18'
	WHEN round(DSP.AON,1) BETWEEN 18.01 AND 24 THEN '18-24'
	WHEN round(DSP.AON,1) BETWEEN 24.01 AND 30 THEN '24-30'
	WHEN round(DSP.AON,1) BETWEEN 30.01 AND 36 THEN '30-36'
	WHEN round(DSP.AON,1) BETWEEN 36.01 AND 42 THEN '36-42'
	WHEN round(DSP.AON,1) BETWEEN 42.01 AND 48 THEN '42-48'
	WHEN round(DSP.AON,1) BETWEEN 48.01 AND 54 THEN '48-54'
	WHEN round(DSP.AON,1) BETWEEN 54.01 AND 60 THEN '54-60'
	WHEN round(DSP.AON,1) BETWEEN 60.01 AND 66 THEN '60-66'
	WHEN round(DSP.AON,1) BETWEEN 66.01 AND 72 THEN '66-72'
	WHEN round(DSP.AON,1) >  72 THEN '73 and Above'
ELSE 'Undefined' END AS VARCHAR(12))  MON_AON_BUCKET,
CAST(LTPG.tariff_plan_name  AS VARCHAR(100))  TARIFF_PLAN_NAME,
CAST(CASE WHEN lower(TRIM(DSSH.CURR_STATUS_DESC)) = 'a' THEN 'Active'
WHEN lower(TRIM(DSSH.CURR_STATUS_DESC)) = 'd' THEN 'Disconnect'
WHEN lower(TRIM(DSSH.CURR_STATUS_DESC)) = 's' THEN 'Suspension'
ELSE  TRIM(DSSH.CURR_STATUS_DESC)
END  AS VARCHAR(100))  CURR_STATUS_DESC,
CAST(CASE WHEN dsurh.revenue_band_desc IS NULL THEN '00000-00000' ELSE dsurh.revenue_band_desc END AS VARCHAR(100))  ARPU_BUCKET,
CAST(DSP.CURR_TARIFF_PLAN_SER_CLASS  AS VARCHAR(300))   CURR_TARIFF_PLAN_SER_CLASS,
CAST(CCH.cost_center_desc  AS VARCHAR(100)) COST_CENTER_DESC ,
CAST(COUNT(DISTINCT(DSP.SUBSCRIPTION_ID))  AS INTEGER) TOTAL_SUBS_CNT,
/* CAST(SUM(DSURH.TOTAL_REVENUE_OUTGOING_CDR)  AS  DECIMAL(18,2))  OUTGOING_REVENUE_AMT , changed on 3rd june*/
CAST(SUM(DSURH.OUT_REVENUE_BILL_AMT_WO_ROAM)  AS  DECIMAL(18,2))  OUTGOING_REVENUE_AMT ,
CAST(SUM(DSURH.adjustments) AS DECIMAL(18,2)) adjustments,
CAST(SUM(DSURH.Total_IUC_Pass_Through)  AS DECIMAL(18,2)) Total_IUC_Pass_Through,
CAST(SUM(DSURH.TOTAL_REVENUE_INCOMING_CDR)  AS DECIMAL(18,2)) TOTAL_REVENUE_INCOMING,

CAST(COUNT(DISTINCT(CASE WHEN lower(trim(DSSH.CURR_STATUS_DESC)) ='s'
AND EXTRACT( MONTH FROM DSSH.STATUS_EFF_DATE ) = EXTRACT(MONTH FROM LTM.MON_BEGIN_DATE) 
AND EXTRACT( YEAR FROM DSSH.STATUS_EFF_DATE ) = EXTRACT( YEAR FROM LTM.MON_BEGIN_DATE) 
THEN DSP.SUBSCRIPTION_ID END)) AS INTEGER) SUSPENSION_CNT, 

CAST(COUNT(DISTINCT(CASE WHEN (lower(trim(DSSH.CURR_STATUS_DESC)) ='d' OR lower(trim(DSSH.CURR_STATUS_DESC)) ='disconnect') 
AND EXTRACT( MONTH FROM DSSH.STATUS_EFF_DATE ) = EXTRACT ( MONTH FROM LTM.MON_BEGIN_DATE ) 
AND EXTRACT( YEAR FROM DSSH.STATUS_EFF_DATE ) = EXTRACT ( YEAR FROM LTM.MON_BEGIN_DATE ) 
THEN DSP.SUBSCRIPTION_ID END)) AS INTEGER) DISCONNECTED_CNT,

CAST(SUM(DSURH.TOTAL_OUT_USAGE_CDR) AS DECIMAL(18,0)) ACTUAL_OUTGOING_USAGE,

CAST(COUNT(DISTINCT(CASE WHEN lower(trim(DSSH.CURR_STATUS_DESC)) ='grace' 
AND EXTRACT ( MONTH FROM DSSH.STATUS_EFF_DATE ) = EXTRACT ( MONTH FROM LTM.MON_BEGIN_DATE ) 
AND EXTRACT ( YEAR FROM  DSSH.STATUS_EFF_DATE ) = EXTRACT ( YEAR FROM LTM.MON_BEGIN_DATE ) 
THEN DSP.SUBSCRIPTION_ID END)) AS INTEGER) GRACE_CNT,

CAST(SUM(DSURH.ADC)  AS  FLOAT) ADC,
CAST(SUM(DSURH.ROAMING_SURCHARGE_AMT)  AS DECIMAL(18,2)) ROAMING_SURCHARGE_AMT,
CAST(SUM(DSURH.REVENUE_SHARE)  AS DECIMAL(18,2)) REVENUE_SHARE,
CAST(SUM(DSURH.ACCESSFEE_RENTALS)  AS DECIMAL(18,2)) ACCESSFEE_RENTALS,
CAST(UPPER(TRIM(LCPG.zones))  AS VARCHAR(25)) ZONE_AGNT,
CAST(UPPER(TRIM(LPGV.zones))  AS VARCHAR(20)) ZONE_PIN ,
CAST(SUM(DSURH.Home_IUC_Pass_Through)  AS DECIMAL(18,2)) Home_IUC_Pass_Through,
CAST(SUM(DSURH.Roam_IUC_Pass_Through)  AS DECIMAL(18,2)) Roam_IUC_Pass_Through
FROM  
DP_VEDW_BO..LKP_TIME_MON   LTM 
INNER JOIN 
 DP_VEDW_BO..DIM_SUBS_USAGE_REV_HISTORY  DSURH 
ON	(LTM.date_mon_id=DSURH.DATE_MON_ID)

LEFT OUTER JOIN 
DP_VEDW_BO..DIM_SUBSCRIPTION_PROFILE_MONTHLY  DSP 
ON	(DSP.SUBSCRIPTION_ID=DSURH.SUBSCRIPTION_ID
AND	DSP.SOURCE_SYSTEM_CODE = DSURH.SOURCE_SYSTEM_CODE)

LEFT OUTER JOIN DP_VEDW_BO..LKP_PINCODE_GROUP_VIEW   LPGV
ON (LPGV.pincode=SUBSTR(TRIM(DSP.BILL_PINCODE),1,6)
AND DSP.SUB_CIRCLE_ID=LPGV.circle_cd)

LEFT OUTER JOIN DP_VEDW_BO..DIM_SUBS_TARIFF_HISTORY  TariffPlanUsage 
ON (DSP.SUBSCRIPTION_ID=TariffPlanUsage.SUBSCRIPTION_ID
AND DSP.SUB_CIRCLE_ID = TariffPlanUsage.CIRCLE_CD
AND TariffPlanUsage.TARIFF_EFF_DATE_TM <=LTM.mon_end_date_tm
AND TariffPlanUsage.TARIFF_END_DATE_TM >=LTM.mon_end_date_tm
)
LEFT OUTER JOIN DP_VEDW_BO..LKP_TARIFF_PLAN_GROUP   LTPG 
ON (LTPG.tariff_plan_id=TariffPlanUsage.CURR_TARIFF_PLAN_ID 
AND LTPG.circle_cd = TariffPlanUsage.CIRCLE_CD)

LEFT OUTER JOIN DP_VEDW_BO..DIM_SUBS_STATUS_HISTORY  DSSH 
ON (DSP.SUBSCRIPTION_ID=DSSH.SUBSCRIPTION_ID
AND DSP.SOURCE_SYSTEM_CODE = DSSH.SOURCE_SYSTEM_CODE
AND LTM.mon_end_date >= DSSH.STATUS_EFF_DATE
AND DSSH.STATUS_END_DATE >  LTM.mon_end_date
)
LEFT OUTER JOIN DP_VEDW_BO..Dim_Cost_Center_History  CCH 
ON (DSP.SUBSCRIPTION_ID=CCH.subscription_id  
AND LTM.mon_end_date >= CCH.cost_center_eff_dt  
AND  LTM.mon_end_date  < CCH.cost_center_end_dt  
AND DSP.SOURCE_SYSTEM_CODE  = CCH.source_system_code)

LEFT OUTER JOIN DP_VEDW_BO..LKP_CHANNEL_PARTNER_GROUP  LCPG 
ON (TRIM(LCPG.channel_name)=TRIM(DSP.DISTRIBUTOR_ID) 
AND LCPG.source_system_code=DSP.SOURCE_SYSTEM_CODE)

LEFT OUTER JOIN 
      (
         SELECT 
            AREA_ID
	      , AREA_DESC
	      , SOURCE_SYSTEM_CODE
         FROM 
               DP_VEDW_BO..AREA
	 WHERE SOURCE_SYSTEM_CODE = 1020
      )  CORP 
   ON    CORP.AREA_ID = DSP.CORP_CODE                             	                    
 AND    CORP.SOURCE_SYSTEM_CODE = DSP.SOURCE_SYSTEM_CODE

WHERE
(
LTM.DATE_MON_ID  =  ${DATE_MON_ID_1}
AND DSP.SUB_CIRCLE_ID =  ${CIRCLE}
AND DSURH.DATE_MON_ID =  ${DATE_MON_ID_1}
AND DSURH.CIRCLE_CD = ${CIRCLE}
AND DSP.ACTIVATION_DATE  <>  '2899-09-09'
)
GROUP BY  1,  2,  3,  4,  5,  6,  7,  8,  9,  10,  11,  12, 13, 14, 28, 29;
!
if [ ${NZ_RETCODE} -ne 0 ]
then
      exit 1
fi

nzsql_wrap <<! >> ./xlogs/arpu_${CIRCLE}_${DATE_MON_ID_1}.log
\c ${DBVNAME}
/*###############################################################################################
###  Step2: Refreshing view                             ###
###############################################################################################*/

CREATE OR REPLACE VIEW ${DBVNAME}..SAS_ARPU_M_${CIRCLE}
AS
SELECT * FROM ${DBNAME}..ARPU_SGMNT_MUMBAI 
WHERE CIRCLE_CODE= ${CIRCLE};
!

if [ ${NZ_RETCODE} -ne 0 ]
then
      exit 1
fi 

nzsql_wrap <<! >> ./xlogs/arpu_${CIRCLE}_${DATE_MON_ID_1}.log
\c ${DBNAME}
/*###############################################################################################
### Step2: INSERT a row in SAS load control table with previous date_mon_id            ##        
#################################################################################################*/
INSERT INTO ${DBNAME}..SAS_CONTROL_TABLE
SELECT
NEXT VALUE FOR SEQ_SAS_CONTROL_TABLE
,'ARPU'
,'M'
,'SAS_ARPU_M_${CIRCLE}'
,NULL
,${CIRCLE}
,CURRENT_TIMESTAMP
,CURRENT_TIMESTAMP
,NULL
,2
,100
,NULL
,NULL
,NULL
,'D'
;
!
if [ ${NZ_RETCODE} -ne 0 ]
then
      echo " apru Failed for CIRCLE : ${CIRCLE}!!!!!!!!!!!!!!!  "  >> ./xlogs/arpu_${CIRCLE}_${DATE_MON_ID_1}.log
	  exit 1
fi
fi
done < ./xlist/circle.lst
